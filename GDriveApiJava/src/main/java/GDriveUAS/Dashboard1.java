/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GDriveUAS;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.Drive.Files;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author KMalif
 */
public class Dashboard1 extends javax.swing.JFrame {
    // DefaultTreeModel treeModel;
    DefaultTableModel model;

    /**
     * Creates new form 
     */
    public Dashboard1() {
        initComponents();
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTree1.setModel(new DefaultTreeModel(getData(null)));
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.SE_RESIZE_CURSOR));
        jTree1.setMaximumSize(new java.awt.Dimension(74, 652));
        jScrollPane1.setViewportView(jTree1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 183;
        gridBagConstraints.ipady = 252;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 10, 11, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);
        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());
        getContentPane().add(jPanel2, new java.awt.GridBagConstraints());
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    public DefaultMutableTreeNode getData(String IdFolder) {
            try {
            List<File> googleRootFolders = GetSubFolders.getGoogleSubFolders(IdFolder);//carpeta raiz
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("MyDrive");
            for (File folder : googleRootFolders) {
                DefaultMutableTreeNode year = new DefaultMutableTreeNode(folder.getName());
                
                
                List<File> googleRootFolders_ = GetSubFolders.getGoogleSubFolders(folder.getId());//subfolders
                for (File folders : googleRootFolders_) {
                    DefaultMutableTreeNode month = new DefaultMutableTreeNode(folders.getName());
                   
                    
                    List<File> googleRootFolders3 = GetSubFolders.getGoogleSubFolders(folder.getId());//sub-subfolders
                    for (File folderss : googleRootFolders3) {
                       DefaultMutableTreeNode day = new DefaultMutableTreeNode();
                      
                       
              
                      /*    List<File> rootGoogleFolders = FindFilesByName.getGoogleFilesByName("");//archivos
                       for(File Files:rootGoogleFolders){
                          DefaultMutableTreeNode files = new DefaultMutableTreeNode(Files.getName());
                          day.add(files);
                }*/
                    
                       
                       
                       
                       month.add(day);
                }
                    year.add(month);
                }
                root.add(year);
                }
            return root;
        } catch (Exception e) {
        }
        return null;

    }

    private static void deleteFile(Drive service, String fileId) {
        try {
            service.files().delete(fileId).execute();
        } catch (IOException e) {
            System.out.println("Ocurrio Un Error: " + e);
        }
    }

    public static final List<File> getGoogleFilesByName(String fileNameLike) throws IOException {

        Drive driveService = GoogleDriveUtils.getDriveService();

        String pageToken = null;
        List<File> list = new ArrayList<File>();

        String query = " name contains '" + fileNameLike + "' " //
                + " and mimeType != 'application/vnd.google-apps.folder' ";

        do {
            FileList result = driveService.files().list().setQ(query).setSpaces("drive") //
                    // Fields will be assigned values: id, name, createdTime, mimeType
                    .setFields("nextPageToken, files(id, name, createdTime, mimeType)")//
                    .setPageToken(pageToken).execute();
            for (File file : result.getFiles()) {
                list.add(file);
            }
            pageToken = result.getNextPageToken();
        } while (pageToken != null);
        //
        return list;
    }
    /* private void loadRootFiles() {
        File rootFile = new File();
        rootFile.setId("root");
        rootFile.setName("Google Drive");
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(rootFile);

        jTree1.setShowsRootHandles(true);
        treeModel = new DefaultTreeModel(root, true);
        jTree1.setModel(treeModel);

        loadChildren(root, "root", () -> {
            jTree1.setSelectionRow(0);
            jTree1.expandRow(0);
        });
    }*/

    private void showFile() {
        try {
            model.setRowCount(0);
            Drive service = GDriveUAS.GoogleDriveUtils.getDriveService();
            List<File> files = retrieveAllFiles(service);

            int No = 0;
            for (File file : files) {
                String id = file.getId();
                String Nama = file.getName();
                String Type = file.getMimeType();
                String Ukuran = String.valueOf(file.getSize());
                Boolean Owner = file.getOwnedByMe();
                No++;
                Object[] data = {id, No, Nama, Type};
                model.addRow(data);
                
                System.out.println(Type);
            }
        } catch (IOException e) {
        }
    }

   

    private static List<File> retrieveAllFiles(Drive service) throws IOException {
        List<File> result = new ArrayList<File>();
        Files.List request = service.files().list();

        do {
            try {
                FileList files = request.execute();

                result.addAll(files.getFiles());
                request.setPageToken(files.getNextPageToken());
            } catch (IOException e) {
                System.out.println("Ocurrio Un Error: " + e);
                request.setPageToken(null);
            }
        } while (request.getPageToken() != null
                && request.getPageToken().length() > 0);

        return result;
    }

}
